import logging
import threading
import http.server
import socketserver
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import os
from dotenv import load_dotenv

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
PROFILE, FULL_NAME, AGE, GENDER, PERSONALITY, NEXT_TEST, MASLOW, NEXT_TEST_2, IQ = range(9)

# –ò–º–ø–æ—Ä—Ç—ã –ª–æ–≥–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
from personality_test import ask_personality_question, process_personality_response
from maslow_test import ask_maslow_question, process_maslow_response
from iq_test import ask_iq_question, process_iq_response

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø - HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=reply_markup)
    return PROFILE

async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text != "üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å'.")
        return PROFILE
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    return FULL_NAME

async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    full_name = update.message.text.strip()
    context.user_data["full_name"] = full_name
    await update.message.reply_text(" üë§ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    age = update.message.text.strip()
    context.user_data["age"] = age
    gender_keyboard = [["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]]
    reply_markup = ReplyKeyboardMarkup(gender_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üöª –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=reply_markup)
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    gender = update.message.text.strip()
    if gender not in ["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return GENDER

    context.user_data["gender"] = gender.replace("üë® ", "").replace("üë© ", "")
    context.user_data["personality_index"] = 0
    context.user_data["personality_answers"] = []

    # üî• –ú—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞ –Ω–∞ —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
    await update.message.reply_text(
        "üß† –û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n"
    )

    return await ask_personality_question(update, context)


async def start_maslow_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # await update.message.reply_text("üå± –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ –ü–∏—Ä–∞–º–∏–¥–µ –ú–∞—Å–ª–æ—É...", reply_markup=ReplyKeyboardRemove())
    context.user_data["maslow_index"] = 0
    context.user_data["maslow_answers"] = []
    return await ask_maslow_question(update, context)

async def start_iq_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # await update.message.reply_text("üß© –ó–∞–ø—É—Å–∫–∞–µ–º IQ —Ç–µ—Å—Ç...", reply_markup=ReplyKeyboardRemove())
    context.user_data["iq_index"] = 0
    context.user_data["iq_scores"] = []
    return await ask_iq_question(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main() -> None:
    logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Ä—Ç–∞)
    def fake_web_server():
        PORT = 10000
        Handler = http.server.SimpleHTTPRequestHandler
        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            httpd.serve_forever()

    threading.Thread(target=fake_web_server, daemon=True).start()


    TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^üß† –ù–æ–≤—ã–π —Ç–µ—Å—Ç$") & ~filters.COMMAND, start)
        ],            
        states={
            PROFILE: [
                MessageHandler(
                    filters.Regex("^üß† (–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å|–ù–æ–≤—ã–π —Ç–µ—Å—Ç)$") & ~filters.COMMAND,
                    profile_start
                )
            ],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            PERSONALITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_personality_response)],
            NEXT_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_maslow_test)],
            MASLOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_maslow_response)],
            NEXT_TEST_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_iq_test)],
            IQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_iq_response)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
