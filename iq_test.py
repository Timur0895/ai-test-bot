import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from google_sheet_helper import save_results_to_google_sheet
from analyze_candidate import analyze_candidate
import os
from dotenv import load_dotenv

load_dotenv()

iq_test_questions = [
    {
        "question": "1. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –≤ —Ä—è–¥—É: 2, 4, 8, 16, ?",
        "options": ["20", "24", "32", "30"],
        "correct": 2
    },
    {
        "question": "2. –ï—Å–ª–∏ –î–ï–ù–¨ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ù–û–ß–ò, —Ç–æ –õ–ï–¢–û –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ...?",
        "options": ["–ó–ò–ú–ê", "–°–û–õ–ù–¶–ï", "–û–°–ï–ù–¨", "–¢–ï–ü–õ–û"],
        "correct": 0
    },
    {
        "question": "3. –ù–∞–π–¥–∏—Ç–µ –ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ: –∫–æ—Ç, —Å–æ–±–∞–∫–∞, –≤–æ—Ä–æ–±–µ–π, –ø–æ–ø—É–≥–∞–π.",
        "options": ["–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–≤–æ—Ä–æ–±–µ–π", "–ø–æ–ø—É–≥–∞–π"],
        "correct": 2  # –≤–æ—Ä–æ–±–µ–π ‚Äî –¥–∏–∫–∞—è –ø—Ç–∏—Ü–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –¥–æ–º–∞—à–Ω–∏–µ
    },
    {
        "question": "4. –†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 5x - 3 = 2x + 6",
        "options": ["x = 1", "x = 2", "x = 3", "x = 4"],
        "correct": 2
    },
    {
        "question": "5. –£–≤–µ–ª–∏—á–∏–º —Å—Ç–æ—Ä–æ–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞ –≤ 2 —Ä–∞–∑–∞. –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç?",
        "options": [
            "–ü–ª–æ—â–∞–¥—å √ó2",
            "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            "–ü–ª–æ—â–∞–¥—å √ó4",
            "–ü–µ—Ä–∏–º–µ—Ç—Ä —É–º–µ–Ω—å—à–∏—Ç—Å—è"
        ],
        "correct": 2
    },
    {
        "question": "6. –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É–∫–≤: –ü, –ê, –ù, –û, –†, –ê, –ú, –ê?",
        "options": ["–ü–ê–†–ú–ê", "–ü–ê–ù–û–†–ê–ú–ê", "–ù–û–†–ê", "–ú–ê–ù–ì–û"],
        "correct": 1
    },
    {
        "question": "7. –£—Ç–∫–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ –∏ –≤–µ—Å–∏—Ç 3 –∫–≥. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤–µ—Å–∏—Ç—å —É—Ç–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å—Ç–∞–Ω–µ—Ç –Ω–∞ –¥–≤–µ –Ω–æ–≥–∏?",
        "options": ["1.5 –∫–≥", "3 –∫–≥", "6 –∫–≥", "2 –∫–≥"],
        "correct": 1
    },
    {
        "question": "8. –í —Å–µ–º—å–µ 2 –æ—Ç—Ü–∞ –∏ 2 —Å—ã–Ω–∞. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫?",
        "options": ["4", "5", "3", "6"],
        "correct": 2
    },
    {
        "question": "9. –ö–∞–∫–æ–µ –∏–∑ —ç—Ç–∏—Ö —á–∏—Å–µ–ª –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 9: 627, 724, 123, 358?",
        "options": ["627", "724", "123", "358"],
        "correct": 0
    },
    {
        "question": "10. –ù–∞–π–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–∞–≥—Ä–∞–º–º–æ–π —Å–ª–æ–≤–∞ ‚Äò–ü–ê–†–ö‚Äô",
        "options": ["–ü–ê–ö–†", "–ü–ê–†–ö", "–ö–†–ê–ü", "–ü–ê–†–ê"],
        "correct": 2
    }
]


def get_iq_keyboard(options):
    return ReplyKeyboardMarkup([options], one_time_keyboard=True, resize_keyboard=True)

async def ask_iq_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data.get("iq_index", 0) == 0:
        context.user_data["iq_test_questions"] = [q["question"] for q in iq_test_questions]
    index = context.user_data.get("iq_index", 0)
    if index < len(iq_test_questions):
        question = iq_test_questions[index]
        await update.message.reply_text(question["question"], reply_markup=get_iq_keyboard(question["options"]))
        return 8  # IQ
    else:
        return await analyze_iq(update, context)

async def process_iq_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    index = context.user_data.get("iq_index", 0)
    question = iq_test_questions[index]
    user_answer = update.message.text.strip()
    try:
        selected = question["options"].index(user_answer)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return 8
    is_correct = 1 if selected == question["correct"] else 0
    context.user_data.setdefault("iq_scores", []).append(is_correct)
    context.user_data["iq_index"] += 1
    return await ask_iq_question(update, context)

# üí¨ –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—ã —É–∫–∞–∑—ã–≤–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑ –≥–¥–µ-–Ω–∏–±—É–¥—å –≤ bot_main.py
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # id –≥—Ä—É–ø–ø—ã —Å —Ñ–æ—Ä—É–º–∞–º–∏
THREAD_ID_HIRING = int(os.getenv("THREAD_ID_HIRING", "1234567890"))  # id —Ç–µ–º—ã "–ù–∞–π–º"

async def analyze_iq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    correct = sum(context.user_data.get("iq_scores", []))
    level = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å IQ" if correct >= 8 else "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å IQ" if correct >= 5 else "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ IQ"
    context.user_data["iq_result"] = f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct} –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n{level}"
    
    await update.message.reply_text(context.user_data["iq_result"], reply_markup=ReplyKeyboardRemove())

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–∞–Ω–∞–ª–∏–∑
    try:
        # await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏—Ç–æ–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
        summary = analyze_candidate(context.user_data)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞ "–ù–∞–π–º"
        await context.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            message_thread_id=THREAD_ID_HIRING,
            text=f"üì• –ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç:\n\n{summary}"
        )

        logging.info("–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–º—É '–ù–∞–π–º'.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

    
    await update.message.reply_text("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ.",
        reply_markup=ReplyKeyboardMarkup([["üß† –ù–æ–≤—ã–π —Ç–µ—Å—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É
    try:
        save_results_to_google_sheet(context.user_data)
        logging.info("–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")    

    return ConversationHandler.END