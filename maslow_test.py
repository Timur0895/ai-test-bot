import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
NEXT_TEST_2 = 7

maslow_test_questions = [
    # –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    {"question": "1. –Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã, –∞ –Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
    {"question": "2. –ù–∞–ª–∏—á–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–π –∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
    {"question": "3. –í –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö —è –∏—Å–ø—ã—Ç—ã–≤–∞—é –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —á—ë—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
    {"question": "4. –ú–Ω–µ –≤–∞–∂–Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç—å –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},

    # –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
    {"question": "5. –ú–Ω–µ –≤–∞–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã.", "category": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"},
    {"question": "6. –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ —Ü–µ–Ω—é –¥—Ä—É–∂–µ—Å–∫—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.", "category": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"},
    {"question": "7. –ú–Ω–µ –≤–∞–∂–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –º–æ–µ–π —Ä–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ.", "category": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"},
    {"question": "8. –Ø –ª—é–±–ª—é –ø–æ–ª—É—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –∫–æ–ª–ª–µ–≥ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.", "category": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"},

    # –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    {"question": "9. –Ø —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ –≤—ã—Å–æ–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ —Ö–æ—á—É –±—ã—Ç—å –∑–∞–º–µ—á–µ–Ω–Ω—ã–º –∑–∞ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"},
    {"question": "10. –ú–Ω–µ –≤–∞–∂–Ω–æ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü–µ –∏ –≤–∏–¥–µ—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É —Ä–æ—Å—Ç–∞.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"},
    {"question": "11. –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –º–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—è –∏ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ—é –º–æ—Ç–∏–≤–∞—Ü–∏—é.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"},

    # –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
    {"question": "12. –Ø —Ö–æ—á—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"},
    {"question": "13. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ –¥–ª—è –º–µ–Ω—è –∫–ª—é—á–µ–≤–∞—è.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"},
    {"question": "14. –Ø —Å—Ç–∞–≤–ª—é –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"},
    {"question": "15. –Ø –≥–æ—Ç–æ–≤ –æ–±—É—á–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –Ω–∞–≤—ã–∫–∞–º –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ.", "category": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"}
]


def get_maslow_keyboard():
    return ReplyKeyboardMarkup([
        ["–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ", "–°–∫–æ—Ä–µ–µ –≤–µ—Ä–Ω–æ"],
        ["–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", "–°–∫–æ—Ä–µ–µ –Ω–µ–≤–µ—Ä–Ω–æ"],
        ["–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ"]
    ], one_time_keyboard=True, resize_keyboard=True)

async def ask_maslow_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data.get("maslow_index", 0) == 0:
        context.user_data["maslow_test_questions"] = [q["question"] for q in maslow_test_questions]
    index = context.user_data.get("maslow_index", 0)
    if index < len(maslow_test_questions):
        question = maslow_test_questions[index]
        await update.message.reply_text(question["question"], reply_markup=get_maslow_keyboard())
        return 6  # MASLOW
    else:
        return await analyze_maslow(update, context)

async def process_maslow_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    map_answer = {
        "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ": 5,
        "–°–∫–æ—Ä–µ–µ –≤–µ—Ä–Ω–æ": 4,
        "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å": 3,
        "–°–∫–æ—Ä–µ–µ –Ω–µ–≤–µ—Ä–Ω–æ": 2,
        "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ": 1
    }
    user_text = update.message.text.strip()
    if user_text not in map_answer:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
        return 6
    context.user_data.setdefault("maslow_answers", []).append(map_answer[user_text])
    context.user_data["maslow_index"] = context.user_data.get("maslow_index", 0) + 1
    return await ask_maslow_question(update, context)

async def analyze_maslow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = context.user_data.get("maslow_answers", [])
    categories = {}
    for i, question in enumerate(maslow_test_questions[:len(answers)]):
        cat = question["category"]
        categories.setdefault(cat, 0)
        categories[cat] += answers[i]
    result = "\n".join([f"- {k}: {v} –±–∞–ª–ª–æ–≤" for k, v in categories.items()])
    context.user_data["maslow_result"] = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ –ü–∏—Ä–∞–º–∏–¥–µ –ú–∞—Å–ª–æ—É:\n{result}"
    await update.message.reply_text(context.user_data["maslow_result"], reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è IQ —Ç–µ—Å—Ç–∞",
        reply_markup=ReplyKeyboardMarkup([["üß© IQ —Ç–µ—Å—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return NEXT_TEST_2
